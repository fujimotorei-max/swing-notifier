name: swing-notifier

on:
  schedule:
    # 場中監視: 09:00〜15:00 JST（30分ごと）
    - cron: "0,30 0-6 * * 1-5"
    # 日足チェック: 引け後 15:10 JST = 06:10 UTC
    - cron: "10 6 * * 1-5"
  workflow_dispatch:

jobs:
  run-intraday:
    if: github.event_name == 'schedule' && (github.event.schedule == '0,30 0-6 * * 1-5') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      RUN_MODE: intraday
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - run: pip install -r requirements.txt
      - name: Restore state file
        run: |
          git fetch origin state:state || echo "no state branch"
          git checkout state || git checkout -b state
          git checkout main -- trade_state.json || echo "{}" > trade_state.json
      - name: LINE ping (manual runs only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          CHANNEL_ACCESS_TOKEN: ${{ secrets.CHANNEL_ACCESS_TOKEN }}
        run: |
          python - <<'PY'
          import os, requests
          token = os.environ["CHANNEL_ACCESS_TOKEN"]
          resp = requests.post(
              "https://api.line.me/v2/bot/message/broadcast",
              headers={"Authorization": f"Bearer {token}", "Content-Type": "application/json"},
              json={"messages":[{"type":"text","text":"🔔 手動テスト（intraday）"}]}
          )
          print("LINE status:", resp.status_code, resp.text[:200])
          PY
      - name: Run notifier (intraday)
        env:
          CHANNEL_ACCESS_TOKEN: ${{ secrets.CHANNEL_ACCESS_TOKEN }}
        run: python swing_notifier.py
      - name: Save state back
        run: |
          git config --global user.email "bot@example.com"
          git config --global user.name "GitHub Actions"
          git add trade_state.json
          git commit -m "Update trade_state.json" || echo "No changes"
          git push origin state

  run-daily:
    if: github.event_name == 'schedule' && (github.event.schedule == '10 6 * * 1-5') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      RUN_MODE: daily
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - run: pip install -r requirements.txt
      - name: Restore state file
        run: |
          git fetch origin state:state || echo "no state branch"
          git checkout state || git checkout -b state
          git checkout main -- trade_state.json || echo "{}" > trade_state.json
      - name: LINE ping (manual runs only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          CHANNEL_ACCESS_TOKEN: ${{ secrets.CHANNEL_ACCESS_TOKEN }}
        run: |
          python - <<'PY'
          import os, requests
          token = os.environ["CHANNEL_ACCESS_TOKEN"]
          resp = requests.post(
              "https://api.line.me/v2/bot/message/broadcast",
              headers={"Authorization": f"Bearer {token}", "Content-Type": "application/json"},
              json={"messages":[{"type":"text","text":"🔔 手動テスト（daily）"}]}
          )
          print("LINE status:", resp.status_code, resp.text[:200])
          PY
      - name: Run notifier (daily)
        env:
          CHANNEL_ACCESS_TOKEN: ${{ secrets.CHANNEL_ACCESS_TOKEN }}
        run: python swing_notifier.py
      - name: Save state back
        run: |
          git config --global user.email "bot@example.com"
          git config --global user.name "GitHub Actions"
          git add trade_state.json
          git commit -m "Update trade_state.json" || echo "No changes"
          git push origin state
